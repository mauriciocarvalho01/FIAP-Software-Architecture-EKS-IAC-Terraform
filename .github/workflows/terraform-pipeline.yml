name: "Create and Configure EKS Cluster"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false || echo "Cluster already exists, skipping creation."

  helm:
    name: "Install External Secrets with Helm"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_EKS_CLUSTER_NAME: ${{ vars.AWS_EKS_CLUSTER_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure kubectl
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.AWS_EKS_CLUSTER_NAME }}

      - name: Add external-secrets Helm repo
        run: |
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update

      - name: Install External Secrets Operator (ESO)
        run: |
          helm upgrade --namespace external-secrets --create-namespace --install --wait external-secrets external-secrets/external-secrets
  deploy_eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: helm
    if: github.ref == 'refs/heads/main'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      IMAGE_NAME: ${{ vars.APPLICATION_NAME }}
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_EKS_CLUSTER_NAME: ${{ vars.AWS_EKS_CLUSTER_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace fiap || kubectl create namespace fiap

      - name: Ensure Authorization Service Account Exists
        run: |
          kubectl apply -f k8s/metrics.yaml

      - name: Set Kubernetes context to the EKS cluster
        run: kubectl config use-context arn:aws:eks:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:cluster/${{ env.AWS_EKS_CLUSTER_NAME }}

      - name: Deploy Kubernetes resources
        run: |
          kubectl apply -f k8s/mysql-config.yaml
          kubectl apply -f k8s/mysql-deployment.yaml
          kubectl apply -f k8s/mysql-service.yaml
          kubectl apply -f k8s/mysql-volume.yaml
          kubectl apply -f k8s/rabbitmq-service.yaml
          kubectl apply -f k8s/rabbitmq.yaml

      - name: Deploy Observability Resources
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus -f k8s/prometheus/values.yaml
          helm upgrade --install prometheus-adapter prometheus-community/prometheus-adapter -f k8s/prometheus-adapter/values.yaml
          helm upgrade --install prometheus-rabbitmq-exporter prometheus-community/prometheus-rabbitmq-exporter -f k8s/prometheus-rabbitmq-exporter/values.yaml
        
